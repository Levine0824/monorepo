name: CI

on:
  push:
    branches:
      - 'master'
    paths:
      - 'app/**'
      - 'pkg/**'
      - '**_test.go'
  pull_request_target:
    paths:
      - 'app/**'
      - 'pkg/**'
      - '**_test.go'

jobs:
  changes:
    runs-on: ubuntu-latest
    outputs:
      apps_name: ${{ steps.filter.outputs.changes }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            shared: &shared
              - 'pkg/**'
              - 'proto/**'
            backend:
              - *shared
              - 'app/backend/**'
            frontend:
              - *shared
              - 'app/frontend/**'

  prepare:
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.tag.outputs.tag }}
      version: ${{ steps.version.outputs.version }}
      profile: ${{ steps.profile.outputs.profile }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - id: tag
        run: |
          short_commit_id=$(git rev-parse --verify --short HEAD 2>/dev/null)
          commit_timestamp=$(git log -1 --pretty=format:"%ct")
          echo "tag=${short_commit_id}-${commit_timestamp}" >> $GITHUB_OUTPUT
      - id: version
        run: echo "version=$(cat VERSION | sed 's|v||')" >> $GITHUB_OUTPUT
      - id: profile
        run: |
          if [[ ${GITHUB_EVENT_NAME} == 'pull_request' && ${GITHUB_BASE_REF} == refs/heads/release-* ]]; then
            echo "profile=staging" >> $GITHUB_OUTPUT
          else
            echo "profile=test" >> $GITHUB_OUTPUT
          fi

  test:
    runs-on: ubuntu-latest
    needs: changes
    strategy:
      matrix:
        app_name: ${{ fromJSON(needs.changes.outputs.apps_name) }}
        exclude:
          - app_name: shared
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: '1.20.0'
      - name: Run go test
        env:
          APP_NAME: ${{ matrix.app_name }}
        run: make test

  build:
    runs-on: ubuntu-latest
    needs: [ prepare, changes ]
    strategy:
      matrix:
        app_name: ${{ fromJSON(needs.changes.outputs.apps_name) }}
        exclude:
          - app_name: shared
    env:
      APP_NAME: ${{ matrix.app_name }}
      TAG: ${{ needs.prepare.outputs.tag }}
      VERSION: ${{ needs.prepare.outputs.version }}
      REGISTRY: levine824
      PROFILE: ${{ needs.prepare.outputs.profile }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set up Go
        uses: actions/setup-go@v3 # v4 enables cache by default.
        with:
          go-version: '1.20.0'
      - name: Cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: Set up buf
        uses: bufbuild/buf-setup-action@v1.26.1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
      - name: Build images
        run: |
          make build
          make docker-save
      - name: Upload images
        uses: actions/upload-artifact@v3
        with:
          name: images
          path: _output/images/${{ env.APP_NAME }}.tar.gz
          retention-days: 3
      - name: Build kustomize
        run: make kustomize-build
      - name: Upload manifests
        uses: actions/upload-artifact@v3
        with:
          name: manifests
          path: _output/argocd
          retention-days: 3

  push:
    runs-on: ubuntu-latest
    needs: [ build, test ]
    steps:
      - name: Checkout Argocd repo
        uses: actions/checkout@v4
        with:
          repository: levine824/monorepo-argocd.git
          ref: master
          path: argocd
          token: ${{ secrets.ACCESS_TOKEN }}
      - uses: actions/download-artifact@v3
        with:
          name: manifests
          path: argocd
      - uses: actions/download-artifact@v3
        with:
          name: images
          path: artifacts
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Push images
        run: |
          for file in $(ls artifacts); do
            target_name=$(docker load -i artifacts/${file} | awk -F ": " '{print $2}')
            docker push ${target_name}
          done
      - name: Push manifests
        run: |
          cd argocd
          git config --global user.name "Github Actions"
          git config --global user.email "actions@github.com"
          git add -A
          git commit -m "chore(*): update yaml and auto commit by github action [skip ci]"
          git push origin master